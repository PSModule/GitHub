filter Disable-GitHubRepositoryVulnerabilityAlert {
    <#
        .SYNOPSIS
        Disable vulnerability alerts

        .DESCRIPTION
        Disables dependency alerts and the dependency graph for a repository.
        The authenticated user must have admin access to the repository. For more information, see
        "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".

        .EXAMPLE
        Disable-GitHubRepositoryVulnerabilityAlert -Owner 'octocat' -Repo 'hello-world'

        Disables vulnerability alerts for the 'octocat/hello-world' repository.

        .NOTES
        [Disable vulnerability alerts](https://docs.github.com/rest/repos/repos#disable-vulnerability-alerts)
    #>
    [CmdletBinding(SupportsShouldProcess)]
    [Alias('Disable-GitHubRepositoryVulnerabilityAlerts')]
    param(
        # The account owner of the repository. The name is not case sensitive.
        [Parameter()]
        [Alias('org')]
        [string] $Owner,

        # The name of the repository without the .git extension. The name is not case sensitive.
        [Parameter()]
        [string] $Repo,

        # The context to run the command in.
        [Parameter()]
        [string] $Context = (Get-GitHubConfig -Name 'DefaultContext')
    )

    $contextObj = Get-GitHubContext -Context $Context
    if (-not $contextObj) {
        throw 'Log in using Connect-GitHub before running this command.'
    }
    Write-Debug "Context: [$Context]"

    if ([string]::IsNullOrEmpty($Owner)) {
        $Owner = $contextObj.Owner
    }
    Write-Debug "Owner : [$($contextObj.Owner)]"

    if ([string]::IsNullOrEmpty($Repo)) {
        $Repo = $contextObj.Repo
    }
    Write-Debug "Repo : [$($contextObj.Repo)]"

    $inputObject = @{
        Context     = $Context
        APIEndpoint = "/repos/$Owner/$Repo/vulnerability-alerts"
        Method      = 'DELETE'
    }

    if ($PSCmdlet.ShouldProcess("Vulnerability Alerts for [$Owner/$Repo]", 'Disable')) {
        Invoke-GitHubAPI @inputObject | ForEach-Object {
            Write-Output $_.Response
        }
    }
}
